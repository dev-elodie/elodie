// Test_Context(
//  test_results : List<TestResult>
// )


// create a test_context
// test('message'){
//   let test_result = Test_Result()
//   describe('description_one'){
//     let describe_result = Describe_Result()
//
//      it('should'){
//          let it_result = It_Result()
//          // run and evaluate assertion
//         describe_result.append(it_result)
//      }
//
//     test_result.append(describe_result)
//  }
// }

// summaries test_results

type Test_Result (
    passed: Bool
    // describe_results: List<Describe_Result>
    // it_results: List<It_Result>
)

type Describe_Result (
    passed: Bool
)

type It_Result (
    passed: Bool
)


fun test(message: String, body: fun()) {
    // enter scope
    body()
    // leave scope
}

fun describe(message: String, body: fun()) {
    let counter = 0
    // enter scope
    body()
    // leave scope
}

fun it(message: String, body: fun() -> Bool){
    if body() {
        std::io::print_line('Test passed')
    } else {
        std::io::print_line('Test failed')
    }
}


fun a(){
    std::io::print_line('I will pass')
    return true
}

fun b(){
    std::io::print_line('I will fail')
    return false
}


fun two(){
    it('passes', a)
    it('fails',  b)
}

fun one(){
    describe('desc', two)
}

test('test', one)

// std::io::print_line(result.passing_count)
// std::io::print_line(result.failing_count)